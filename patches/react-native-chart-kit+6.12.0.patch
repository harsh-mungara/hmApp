diff --git a/node_modules/react-native-chart-kit/dist/BarChart.js b/node_modules/react-native-chart-kit/dist/BarChart.js
index dabc147..785c2b2 100644
--- a/node_modules/react-native-chart-kit/dist/BarChart.js
+++ b/node_modules/react-native-chart-kit/dist/BarChart.js
@@ -31,6 +31,14 @@ var BarChart = /** @class */ (function (_super) {
     __extends(BarChart, _super);
     function BarChart() {
         var _this = _super !== null && _super.apply(this, arguments) || this;
+        _this.getInnerPaddingRight = function () {
+            var _a = _this.props.chartConfig.innerPaddingRight, innerPaddingRight = _a === void 0 ? 1 : _a;
+            return innerPaddingRight;
+        }
+        _this.getInnerWidth = function () {
+            var _a = _this.props.chartConfig.innerWidth, innerWidth = _a === void 0 ? 1 : _a;
+            return innerWidth;
+        }
         _this.getBarPercentage = function () {
             var _a = _this.props.chartConfig.barPercentage, barPercentage = _a === void 0 ? 1 : _a;
             return barPercentage;
@@ -44,7 +52,7 @@ var BarChart = /** @class */ (function (_super) {
                 return (<Rect key={Math.random()} x={paddingRight +
                     (i * (width - paddingRight)) / data.length +
                     barWidth / 2} y={((barHeight > 0 ? baseHeight - barHeight : baseHeight) / 4) * 3 +
-                    paddingTop} rx={barRadius} width={barWidth} height={(Math.abs(barHeight) / 4) * 3} fill={withCustomBarColorFromData
+                    paddingTop} rx={barRadius} width={10} height={(Math.abs(barHeight) / 4) * 3} fill={withCustomBarColorFromData
                     ? "url(#customColor_0_" + i + ")"
                     : "url(#fillShadowGradientFrom)"}/>);
             });
@@ -129,6 +137,11 @@ var BarChart = /** @class */ (function (_super) {
             ? this.renderHorizontalLines(__assign(__assign({}, config), { count: segments, paddingTop: paddingTop }))
             : null}
           </G>
+          <G>
+            {withInnerLines
+                ? this.renderHorizontalLines(__assign(__assign({}, config), { count: segments, paddingTop: paddingTop, paddingRight: this.getInnerPaddingRight(), width: this.getInnerWidth()}))
+                : null}
+          </G>
           <G>
             {withHorizontalLabels
             ? this.renderHorizontalLabels(__assign(__assign({}, config), { count: segments, data: data.datasets[0].data, paddingTop: paddingTop, paddingRight: paddingRight }))
diff --git a/node_modules/react-native-chart-kit/dist/line-chart/LineChart.js b/node_modules/react-native-chart-kit/dist/line-chart/LineChart.js
index 1ac4227..ba38558 100644
--- a/node_modules/react-native-chart-kit/dist/line-chart/LineChart.js
+++ b/node_modules/react-native-chart-kit/dist/line-chart/LineChart.js
@@ -92,9 +92,9 @@ var LineChart = /** @class */ (function (_super) {
                             getColor: function (opacity) { return _this.getColor(dataset, opacity); }
                         });
                     };
-                    output.push(<Circle key={Math.random()} cx={cx} cy={cy} fill={typeof getDotColor === "function"
-                        ? getDotColor(x, i)
-                        : _this.getColor(dataset, 0.9)} onPress={onPress} {..._this.getPropsForDots(x, i)}/>, <Circle key={Math.random()} cx={cx} cy={cy} r="14" fill="#fff" fillOpacity={0} onPress={onPress}/>, renderDotContent({ x: cx, y: cy, index: i, indexData: x }));
+                    // output.push(<Circle key={Math.random()} cx={cx} cy={cy} fill={typeof getDotColor === "function"
+                    //     ? getDotColor(x, i)
+                    //     : _this.getColor(dataset, 0.9)} onPress={onPress} {..._this.getPropsForDots(x, i)}/>, <Circle key={Math.random()} cx={cx} cy={cy} r="14" fill="#fff" fillOpacity={0} onPress={onPress}/>, renderDotContent({ x: cx, y: cy, index: i, indexData: x }));
                 });
             });
             return output;
@@ -243,21 +243,21 @@ var LineChart = /** @class */ (function (_super) {
             }
             var datas = _this.getDatas(data);
             var baseHeight = _this.calcBaseHeight(datas, height);
-            return data.map(function (dataset, index) {
-                return (<Polygon key={index} points={dataset.data
-                    .map(function (d, i) {
-                    var x = paddingRight +
-                        (i * (width - paddingRight)) / dataset.data.length;
-                    var y = ((baseHeight - _this.calcHeight(d, datas, height)) / 4) * 3 +
-                        paddingTop;
-                    return x + "," + y;
-                })
-                    .join(" ") +
-                    (" " + (paddingRight +
-                        ((width - paddingRight) / dataset.data.length) *
-                            (dataset.data.length - 1)) + "," + ((height / 4) * 3 +
-                        paddingTop) + " " + paddingRight + "," + ((height / 4) * 3 + paddingTop))} fill={"url(#fillShadowGradientFrom" + (useColorFromDataset ? "_" + index : "") + ")"} strokeWidth={0}/>);
-            });
+            // return data.map(function (dataset, index) {
+            //     return (<Polygon key={index} points={dataset.data
+            //         .map(function (d, i) {
+            //         var x = paddingRight +
+            //             (i * (width - paddingRight)) / dataset.data.length;
+            //         var y = ((baseHeight - _this.calcHeight(d, datas, height)) / 4) * 3 +
+            //             paddingTop;
+            //         return x + "," + y;
+            //     })
+            //         .join(" ") +
+            //         (" " + (paddingRight +
+            //             ((width - paddingRight) / dataset.data.length) *
+            //                 (dataset.data.length - 1)) + "," + ((height / 4) * 3 +
+            //             paddingTop) + " " + paddingRight + "," + ((height / 4) * 3 + paddingTop))} fill={"url(#fillShadowGradientFrom" + (useColorFromDataset ? "_" + index : "") + ")"} strokeWidth={0}/>);
+            // });
         };
         _this.renderLine = function (_a) {
             var width = _a.width, height = _a.height, paddingRight = _a.paddingRight, paddingTop = _a.paddingTop, data = _a.data, linejoinType = _a.linejoinType;
@@ -285,7 +285,7 @@ var LineChart = /** @class */ (function (_super) {
                     lastPoint = x + "," + y;
                     return x + "," + y;
                 });
-                output.push(<Polyline key={index} strokeLinejoin={linejoinType} points={points.join(" ")} fill="none" stroke={_this.getColor(dataset, 0.2)} strokeWidth={_this.getStrokeWidth(dataset)} strokeDasharray={dataset.strokeDashArray} strokeDashoffset={dataset.strokeDashOffset}/>);
+                output.push(<Polyline key={index} strokeLinejoin={linejoinType} strokeLinecap={"round"} points={points.join(" ")} fill="none" stroke={_this.getColor(dataset, 0.2)} strokeWidth={_this.getStrokeWidth(dataset)} strokeDasharray={dataset.strokeDashArray} strokeDashoffset={dataset.strokeDashOffset}/>);
             });
             return output;
         };
